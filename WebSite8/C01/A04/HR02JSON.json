[
  {
    "imgString1": "../images2/f300.png",
    "textBox1": "These are some of my solutions to the problems on HackerRank that I've solved so far.xxxxxxThe screenshots are from rextester (an online IDE where I developed/tested the code) and all of the codes passed all of the test cases in HackerRank.xxxxxxEx01 = Diagonal Difference          (10pts)xxxEx02 = Time Conversion              (15pts)xxxEx03 = Plus Minus                   (10pts)xxxEx04 = Min Max Sum                  (10pts)xxxEx05 = Encryption                   (30pts)xxxEx06 = Flipping Bits                (40pts)xxxEx07 = Circular Array Rotation      (20pts)xxxEx08 = Strong Password              (15pts)xxxEx09 = Missing Numbers              (45pts)xxxEx10 = Pangrams                     (20pts)xxxxxxI shall aim to update this site every time I solve an interesting problem. This website was made using ASP.NET(empty), HTML, CSS and jQuery.xxxxxxFull Portfolio = www.damienbactawar.co.ukxxxMy HR Profile = www.hackerrank.com/damien5215"
  },
  {
    "imgString1": "../images/diagonalDifference2.png",
    "textBox1": "DIAGONAL DIFFERENCE PROBLEMxxxxxxThere are two inputs, a jagged matrix 'a[][]' and an integer 'n' denoting the number of rows/columns. Below shows the input HackerRank gives (n = 3).xxxxxx[11,  02,  04]xxx[04,  05,  06]xxx[10,  08, -12]xxxxxx[11,    ,    ] = (11) + (05) + (-12) = 4xxx[  ,  05,    ]xxx[  ,    , -12]xxxxxx[  ,    ,  04] = (04) + (05) + ( 10) = 19xxx[  ,  05,    ]xxx[10,    ,    ]xxxxxxDifference = |(4 - 19)| = 15xxxxxxThe inner loop of the nested for-loop iterates through the row and the outer loop iterates through the column.xxxxxxFor this case x1 = 4, x2 = 19 and x3 = 15."
  },
  {
    "imgString1": "../images/timeConversion.png",
    "textBox1": "TIME CONVERSION PROBLEMxxxxxxThis problem involved converting an input string such as \"01:45:20PM\" to \"13:45:20\". The question also infomred the user that -xxxxxxmidnight = \"12:00:00AM\" = \"12:00:00\" xxxnoon     = \"12:00:00PM\" = \"00:00:00\"xxxxxxWhenever the ninth character of the input string is 'A' then all that has to be changed is to remove the last two characters.xxxxxxWhenever the input's first two characters are '12' and the ninth is 'P' then the first two characters must be changed to '00'.xxxxxxWhenever the input's ninth character is 'P' and the frist two characters are NOT '12', then the hour-numbers must be increased by twelve. My code converts a character-to-string-to-integer. Once a value of 12 has been added the integer is converted back to a character.xxxxxxAs you can see in the code I have used four if/else statements."
  },
  {
    "imgString1": "../images/PlusMinus.png",
    "textBox1": "PLUS MINUS PROBLEMxxxxxxThe input is an array of integers (-4, 3, -9, 0, 4, 1) and the output is three lines, for this input it would be - xxxxxx0.500000xxx0.333333xxx0.166667xxxxxxThese numbers are the number of positive, negative and zero numbers divided by the total number of numbers (3/6, 2/6 and 1/6).xxxxxxPOSITIVE =  3,  4,  1xxxNEGATIVE = -4, -9 xxxZERO     =  0xxxxxxThe output had to be rounded to six decimal points."
  },
  {
    "imgString1": "../images/MinMaxSum.png",
    "textBox1": "MINI-MAX SUM PROBLEMxxxxxxThe input is an array of integers (1, 2, 3, 4, 5) and the output is (10 14).xxxxxx2 + 3 + 4 + 5 = 14 (max)xxx1 + 3 + 4 + 5 = 13xxx1 + 2 + 4 + 5 = 12xxx1 + 2 + 3 + 5 = 11xxx1 + 2 + 3 + 4 = 10 (min)xxxxxxThe first for-loop calculates the total value of the integer array (1 + 2 + 3 + 4 + 5 = 15).xxxxxxThe numbers in the array are summed, producing a new array (14, 13, 12, 11, 10).xxxxxxThe min and max values are then set to the first value of this array (14).xxxxxxThe final for-loop uses two if statements to determine the minimum and maxium value."
  },
  {
    "imgString1": "../images/encryption.png",
    "textBox1": "ENCRYPTION PROBLEMxxxxxxThe input string \"haveaniceday\" has 12 characters and sqrt(12) = a number in between 3 and 4. 3 becomes the row number and 4 becomes the column number and the input can be arranged into a grid -xxxxxxhavexxxanicxxxedayxxxxxxThen taking the characters veritcally the string becomes \"hae and via ecy\" and this is the output.xxxxxxThe first part of the code determines the row and column numbers. If the number of characters is a square number the row and column numbers are equal.xxxxxxThe nested for-loop: The inner loop constructs each word (hae), then loads it into a string array, resets some variables, then the outer loop constructs the next word (and).xxxxxxThe last loop concatenates the strings into one. The final string is added after the loop to avoid the extra space."
  },
  {
    "imgString1": "../images/FlippingBits.png",
    "textBox1": "FLIPPING BITS PROBLEMxxxxxxThis code takes an integer (13), converts it into a 32-bit binary number (0000...1101), inverts the bits (1111...0010), converts this number into decimal (4294967282) and prints these values.xxxxxxFisrt, the code converts the number to binary (string) and the number of zeros to be added to the string in order to create an unsigned 32-bit number, is calculated.xxxxxxThe for-loop constructs the addedZeros string and then the strings are concatenated.xxxxxxAnother for-loop is used to iterate through the string and an if/else statement inverts the value of the bits.xxxxxxThe string (32-bit binary number) is converted back into a decimal number (long) and the result is printed."
  },
  {
    "imgString1": "../images/circularArrayRotation.png",
    "textBox1": "CIRCULAR ARRAY ROTATION PROBLEMxxxxxxThe input is an array {1,2,3,4,5}, it has to be shifted to the right twice (int k = 2) and we want the first three numbers (int [] m = {0,1,2}) in the rotated array. The output for this input are the numbers 4, 5 and 1.xxxxxxIF statement - If the rotation number is > input array size the rotation number is converted into a number which is <= the input array size. For this example, if k = 7, k would become 2 (7 % 5). This is equivalent because the circular array is periodic.xxxxxxTwo empty arrays are created and the input array is split into two parts ({1,2,3} and {4,5}).xxxxxxThe first two for-loops fill one of the empty arrays with the input rotated by k (2) and the array becomes {4,5,1,2,3}.xxxxxxThe final for-loop fills the other empty array with the desired elements (int[] m = {0,1,2,}), so the array becomes {4,5,1} and this array is returned."
  },
  {
    "imgString1": "../images/StrongPassword.png",
    "textBox1": "STRONG PASSWORD PROBLEMxxxxxxA strong password meets 5 conditions; at least 6 characters, which conatains an uppercase character, lowercase character, number and special character (#,$,%, etc).xxxxxxFirst the flag variables are intialised to 1 (upp, low, num, spe). The string is turned into a character array. The for-loop cycles through the characters. The 4 IF statements set the flag variables to 0 if the conditions are true.xxxxxxAfter the loop the flags are summed and if the input is less than 6 characters then the difference (6 - input.Length) is calculated.xxxxxxThe number of extra characters that the input needs to reach 6 characters is compared to the number of conditions that are unsatisfied. The number that is the biggest is the number that is returned.xxxxxxIn this case (\"A1234\"), the output returned is the value 2. The input is less than 6 characters so it needs 1 (6 - 5) more character however because it lacks a lower-case and a special character (2) the output is the integer 2."
  },
  {
    "imgString1": "../images/missingNumbers.png",
    "textBox1": "MISSING NUMBERS PROBLEMxxxxxxThere are two lists of numbers and one of them is missing some numbers. This code determines which numbers are missing and returns them in ascending order.xxxxxxThis code was challenging to develop because one of the inputs was a long (10k) list of numbers. This meant that a brute-force approach was not appropriate. Using the hint that the numbers had a range of about 200, I found a more efficient solution.xxxxxxFirst the range is calculated (brr.Max() - brr.Min()) and this is used to make 2 arrays.xxxxxxInside the for-loop, the freqArrays are filled with all of the numbers (203 to 208, for this example).xxxxxxThen if these values are present in brr and arr, the frequency is captured in the arrays V100 and V200.xxxxxxThis information about the frequency of the numbers is then loaded into the freqArrays (freq1, freq2).xxxxxxThe freqArrays are compared, the missing numbers are determined and the zeros are removed."
  },
  {
    "imgString1": "../images/pangramCode.png",
    "textBox1": "PANGRAMS PROBLEMxxxxxxThe input string (We promptly judged antique ivory buckles for the next prize) is a pangram because it uses every letter in the alphabet.xxxxxxFisrt, the code formats the string by removing all of the whitespaces and lowering the case. Then an array of 26 bools (all initially set to false) is created to represent flags for the presence of each letter in the alphabet.xxxxxxThe for-loop iterates through the characters in the input string. The first letter of the string is a 'w' so flagArray[22] is set to true because 'w' is the 23rd letter in the alphabet (the array starts from 0 rather than 1).xxxxxxThe if/else statement determines whether all of the flags have been set to true or not. If they have not then the input is NOT a pangram however if they have, then it is.xxxxxxFor this particular input, all of the flags get set to true therefore it is a pangram."
  }
]